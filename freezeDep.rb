#!/usr/bin/env ruby
require 'optparse'
require 'open3'
require_relative 'utils/logger.rb'
require 'fileutils'

def fail_with_message(message)
  puts "\e[31m#{message}\e[0m"
  exit(1)
end

varFile = "ext.gradle"

stdin, stdout, stderr, wait_thr = Open3.popen3("git status ext.gradle" )
exit_code =  wait_thr.value
newFile=""
newFile = "_new" unless exit_code.success?
stdout.close
err = stderr.gets(nil)
stderr.close
puts err

## fail si nb lignes  dyn_ext(ext) <> ext(ext)
FileUtils.cp "dyn_dependencies.gradle", varFile

stdin, stdout, stderr, wait_thr = Open3.popen3("./gradlew app:dependencies" )
result = stdout.gets(nil)
stdout.close
err = stderr.gets(nil)
stderr.close

puts err
exit_code =  wait_thr.value
fail_with_message('freeze -- failed') unless exit_code.success?
  
FileUtils.cp varFile, "#{varFile}~"
  
begin
  file = File.open("#{varFile}#{newFile}", "w")
  file.write "// " + "!"*80
  file.write "\n// This file is generated by freezeDep.rb"
  file.write "\n// DO NOT MODIFY"
  file.write "\n// " + "!"*80
  file.write "\n\n"
  File.foreach("#{varFile}~") do |line|
    unless line =~ /= *".*\+"/
      file.write line 
      next
    end

    next if line =~ /_compiler/
    
    x_org, rep= line.scan( /^ *([^ ]*) *= "(.*)"/).last
    x = x_org.gsub(/_/, ".").gsub(/\.alt/, "")
    
    puts x #, ":#{x}:#{rep.gsub(/\+/, "\+")} -> +([0-9\.-]*(?:alpha|SNAP)*\w*) *"
    value = result.scan(/:#{x}:#{rep.gsub(/\+/, "\\\\+")} -> +([0-9\.-]*(?:alpha|SNAP)*\w*) */)
    if value.empty?
      value = result.scan(/:#{x}:([0-9\.-]*(?:alpha|SNAP)*\w*) */)
      if value.empty?
        file.write line
        miss = result.scan(/:#{x}:(.* -> )*([0-9\.]*-(?:alpha|SNAP)*.*)$/)
        sMiss = miss.last.nil? ? "nothing" : miss.last.last 
        puts "#{sMiss} matches #{line}"
        next
      end
    end
    file.write "    #{x_org} = \"#{value.last.last}\"\n"
  end
rescue IOError => e
  #some error occur, dir not writable etc.
ensure
  file.close unless file.nil?
end

